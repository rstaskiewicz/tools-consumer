plugins {
    id 'idea'
    id 'announce'
    id 'org.springframework.boot' version '2.2.0.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.8.RELEASE' apply false
    id 'com.bmuschko.docker-remote-api' version '5.2.0' apply false
}

allprojects {
    version = '0.0.1'
    group = 'com.gitlab.rstaskiewicz.tool'

    repositories {
        jcenter()
        maven { url 'https://repo.spring.io/milestone' }
    }
}

ext {
    set('springCloudVersion', "Hoxton.RC2")
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        implementation 'io.vavr:vavr:0.10.2'
        implementation 'com.google.guava:guava:28.1-jre'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.6'
        implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.6'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.6'

        compileOnly 'org.projectlombok:lombok'

        testImplementation 'org.codehaus.groovy:groovy-all:2.5.6'
        testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
        testImplementation 'org.spockframework:spock-spring:1.3-groovy-2.5'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        testCompileOnly 'org.projectlombok:lombok'

        annotationProcessor 'org.projectlombok:lombok'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    configurations {
        integrationTestImplementation.extendsFrom testImplementation
        integrationTestCompileOnly.extendsFrom testCompileOnly
        integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    }

    sourceSets {
        integrationTest {
            compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
            runtimeClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
        }
    }

    task integrationTest(type: Test) {
        group = LifecycleBasePlugin.VERIFICATION_GROUP
        description = 'Runs the integration tests'

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        reports {
            html.destination = file("$buildDir/reports/tests/integrationTest")
            junitXml.destination = file("$buildDir/test-results/integrationTest")
        }

        outputs.upToDateWhen { false }
        mustRunAfter test
    }

    test {
        forkEvery = 5
        maxParallelForks = Runtime.runtime.availableProcessors() / 2
    }
}
